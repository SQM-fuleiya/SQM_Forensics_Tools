# coding:utf-8
import base64
import time
from Crypto.Cipher import AES
import binascii
import re
 
# 解密
def aes_decode(data, key):
    try:
        aes = AES.new(str.encode(key), AES.MODE_CBC)  # 初始化加密器
        decrypted_text = aes.decrypt(data)  # 解密
        decrypted_text = decrypted_text[:-(decrypted_text[-1])]
    except Exception as e:
        print(e)
    return decrypted_text
 
 
if __name__ == '__main__':
    key = '84319025cf3bd993'  # 密钥长度必须为16、24或32位，分别对应AES-128、AES-192和AES-256
    data = ''
    data = base64.b64decode(data)
    a = aes_decode(data, key)
    print (a)
    内容= re.findall(b'\'(.+)\'',a ,re.I)[0]
    print(base64.b64decode(内容).decode())

